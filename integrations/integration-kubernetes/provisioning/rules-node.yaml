apiVersion: grizzly.grafana.com/v1alpha1
kind: PrometheusRuleGroup
metadata:
    name: node.rules
    namespace: integrations-kubernetes
spec:
    rules:
        - name: 'node_namespace_pod:kube_pod_info:'
          labels: {}
          query: topk by (cluster, namespace, pod) (1, max by (cluster, node, namespace, pod) (label_replace(kube_pod_info{job="integrations/kubernetes/kube-state-metrics",node!=""}, "pod", "$1", "pod", "(.*)")))
          type: recording
        - name: node:node_num_cpu:sum
          labels: {}
          query: count by (cluster, node) (node_cpu_seconds_total{job="integrations/node_exporter",mode="idle"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:))
          type: recording
        - name: :node_memory_MemAvailable_bytes:sum
          labels: {}
          query: sum by (cluster) (node_memory_MemAvailable_bytes{job="integrations/node_exporter"} or (node_memory_Buffers_bytes{job="integrations/node_exporter"} + node_memory_Cached_bytes{job="integrations/node_exporter"} + node_memory_MemFree_bytes{job="integrations/node_exporter"} + node_memory_Slab_bytes{job="integrations/node_exporter"}))
          type: recording
        - name: node:node_cpu_utilization:ratio_rate5m
          labels: {}
          query: avg by (cluster, node) (sum without (mode) (rate(node_cpu_seconds_total{job="integrations/node_exporter",mode!="idle",mode!="iowait",mode!="steal"}[5m])))
          type: recording
        - name: cluster:node_cpu:ratio_rate5m
          labels: {}
          query: avg by (cluster) (node:node_cpu_utilization:ratio_rate5m)
          type: recording
