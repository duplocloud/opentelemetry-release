namespace: integration-kubernetes
groups:
    - name: k8s.rules.container_cpu_limits
      rules:
        - record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_limits
          expr: kube_pod_container_resource_limits{job="integrations/kubernetes/kube-state-metrics",resource="cpu"} * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_cpu:kube_pod_container_resource_limits:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{job="integrations/kubernetes/kube-state-metrics",resource="cpu"}) * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.container_cpu_requests
      rules:
        - record: cluster:namespace:pod_cpu:active:kube_pod_container_resource_requests
          expr: kube_pod_container_resource_requests{job="integrations/kubernetes/kube-state-metrics",resource="cpu"} * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_cpu:kube_pod_container_resource_requests:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{job="integrations/kubernetes/kube-state-metrics",resource="cpu"}) * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.container_cpu_usage_seconds_total
      rules:
        - record: node_namespace_pod_container:container_cpu_usage_seconds_total:sum_irate
          expr: sum by (cluster, namespace, pod, container) (irate(container_cpu_usage_seconds_total{image!="",job="integrations/kubernetes/cadvisor"}[5m])) * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_cache
      rules:
        - record: node_namespace_pod_container:container_memory_cache
          expr: container_memory_cache{image!="",job="integrations/kubernetes/cadvisor"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_limits
      rules:
        - record: cluster:namespace:pod_memory:active:kube_pod_container_resource_limits
          expr: kube_pod_container_resource_limits{job="integrations/kubernetes/kube-state-metrics",resource="memory"} * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_memory:kube_pod_container_resource_limits:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_limits{job="integrations/kubernetes/kube-state-metrics",resource="memory"}) * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.container_memory_requests
      rules:
        - record: cluster:namespace:pod_memory:active:kube_pod_container_resource_requests
          expr: kube_pod_container_resource_requests{job="integrations/kubernetes/kube-state-metrics",resource="memory"} * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) ((kube_pod_status_phase{phase=~"Pending|Running"} == 1))
        - record: namespace_memory:kube_pod_container_resource_requests:sum
          expr: sum by (namespace, cluster) (sum by (namespace, pod, cluster) (max by (namespace, pod, container, cluster) (kube_pod_container_resource_requests{job="integrations/kubernetes/kube-state-metrics",resource="memory"}) * on (namespace, pod, cluster) group_left () max by (namespace, pod, cluster) (kube_pod_status_phase{phase=~"Pending|Running"} == 1)))
    - name: k8s.rules.container_memory_rss
      rules:
        - record: node_namespace_pod_container:container_memory_rss
          expr: container_memory_rss{image!="",job="integrations/kubernetes/cadvisor"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_swap
      rules:
        - record: node_namespace_pod_container:container_memory_swap
          expr: container_memory_swap{image!="",job="integrations/kubernetes/cadvisor"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.container_memory_working_set_bytes
      rules:
        - record: node_namespace_pod_container:container_memory_working_set_bytes
          expr: container_memory_working_set_bytes{image!="",job="integrations/kubernetes/cadvisor"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, max by (cluster, namespace, pod, node) (kube_pod_info{node!=""}))
    - name: k8s.rules.pod_owner
      rules:
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(label_replace(kube_pod_owner{job="integrations/kubernetes/kube-state-metrics",owner_kind="ReplicaSet"}, "replicaset", "$1", "owner_name", "(.*)") * on (replicaset, namespace) group_left (owner_name) topk by (replicaset, namespace) (1, max by (replicaset, namespace, owner_name) (kube_replicaset_owner{job="integrations/kubernetes/kube-state-metrics"})), "workload", "$1", "owner_name", "(.*)"))
          labels:
            workload_type: deployment
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(kube_pod_owner{job="integrations/kubernetes/kube-state-metrics",owner_kind="DaemonSet"}, "workload", "$1", "owner_name", "(.*)"))
          labels:
            workload_type: daemonset
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(kube_pod_owner{job="integrations/kubernetes/kube-state-metrics",owner_kind="StatefulSet"}, "workload", "$1", "owner_name", "(.*)"))
          labels:
            workload_type: statefulset
        - record: namespace_workload_pod:kube_pod_owner:relabel
          expr: max by (cluster, namespace, workload, pod) (label_replace(kube_pod_owner{job="integrations/kubernetes/kube-state-metrics",owner_kind="Job"}, "workload", "$1", "owner_name", "(.*)"))
          labels:
            workload_type: job
    - name: node.rules
      rules:
        - record: 'node_namespace_pod:kube_pod_info:'
          expr: topk by (cluster, namespace, pod) (1, max by (cluster, node, namespace, pod) (label_replace(kube_pod_info{job="integrations/kubernetes/kube-state-metrics",node!=""}, "pod", "$1", "pod", "(.*)")))
        - record: node:node_num_cpu:sum
          expr: count by (cluster, node) (node_cpu_seconds_total{job="integrations/node_exporter",mode="idle"} * on (cluster, namespace, pod) group_left (node) topk by (cluster, namespace, pod) (1, node_namespace_pod:kube_pod_info:))
        - record: :node_memory_MemAvailable_bytes:sum
          expr: sum by (cluster) (node_memory_MemAvailable_bytes{job="integrations/node_exporter"} or (node_memory_Buffers_bytes{job="integrations/node_exporter"} + node_memory_Cached_bytes{job="integrations/node_exporter"} + node_memory_MemFree_bytes{job="integrations/node_exporter"} + node_memory_Slab_bytes{job="integrations/node_exporter"}))
        - record: node:node_cpu_utilization:ratio_rate5m
          expr: avg by (cluster, node) (sum without (mode) (rate(node_cpu_seconds_total{job="integrations/node_exporter",mode!="idle",mode!="iowait",mode!="steal"}[5m])))
        - record: cluster:node_cpu:ratio_rate5m
          expr: avg by (cluster) (node:node_cpu_utilization:ratio_rate5m)
