// Metrics
prometheus.exporter.windows "integrations_windows_exporter" {
  enabled_collectors = ["cpu", "cs", "logical_disk", "net", "os", "service", "system", "time", "diskdrive", "iis"]
}

discovery.relabel "integrations_windows_exporter" {
  targets = prometheus.exporter.windows.integrations_windows_exporter.targets

  rule {
    target_label = "job"
    replacement  = "integrations/windows_exporter"
  }

  rule {
    target_label = "instance"
    replacement  = "{HOSTNAME}"
  }

  rule {
    target_label = "cluster"
    replacement  = "{DUPLO_CLUSTER_NAME}"
  }

  rule {
    target_label = "namespace"
    replacement  = "{DUPLO_TENANT_NAME}"
  }

  rule {
    target_label = "label_tenantname"
    replacement  = "{DUPLO_TENANT_NAME}"
  }
}

prometheus.scrape "integrations_windows_exporter" {
  targets    = discovery.relabel.integrations_windows_exporter.output
  forward_to = [prometheus.relabel.integrations_windows_exporter.receiver]
  job_name   = "integrations/windows_exporter"
}

prometheus.relabel "integrations_windows_exporter" {
  forward_to = [prometheus.remote_write.metrics_service.receiver]

  rule {
    source_labels = ["volume"]
    regex         = "HarddiskVolume.*"
    action        = "drop"
  }
}

// Loki Logs
loki.process "logs_integrations_windows_exporter_application" {
  forward_to = [loki.write.logs_service.receiver]

  stage.json {
    expressions = {
      level  = "levelText",
      source = "source",
    }
  }

  stage.labels {
    values = {
      level  = "",
      source = "",
    }
  }
}

loki.relabel "logs_integrations_windows_exporter_application" {
  forward_to = [loki.process.logs_integrations_windows_exporter_application.receiver]

  rule {
    source_labels = ["computer"]
    target_label  = "agent_hostname"
  }
}

loki.source.windowsevent "logs_integrations_windows_exporter_application" {
  locale                 = 1033
  eventlog_name          = "Application"
  bookmark_path          = "./bookmarks-app.xml"
  poll_interval          = "0s"
  use_incoming_timestamp = true
  forward_to             = [loki.relabel.logs_integrations_windows_exporter_application.receiver]
  labels                 = {
    instance = "{HOSTNAME}",
    job      = "integrations/windows_exporter",
  }
}

loki.process "logs_integrations_windows_exporter_system" {
  forward_to = [loki.write.logs_service.receiver]

  stage.json {
    expressions = {
      level  = "levelText",
      source = "source",
    }
  }

  stage.labels {
    values = {
      level  = "",
      source = "",
    }
  }
}

loki.relabel "logs_integrations_windows_exporter_system" {
  forward_to = [loki.process.logs_integrations_windows_exporter_system.receiver]

  rule {
    source_labels = ["computer"]
    target_label  = "agent_hostname"
  }
}

loki.source.windowsevent "logs_integrations_windows_exporter_system" {
  locale                 = 1033
  eventlog_name          = "System"
  bookmark_path          = "./bookmarks-sys.xml"
  poll_interval          = "0s"
  use_incoming_timestamp = true
  forward_to             = [loki.relabel.logs_integrations_windows_exporter_system.receiver]
  labels                 = {
    instance = "{HOSTNAME}",
    job      = "integrations/windows_exporter",
  }
}

local.file_match "application_logs" {
  path_targets = {DUPLO_LOGGING_PATHS}
  sync_period = "5s"
}

loki.source.file "application_logs" {
  targets    = local.file_match.application_logs.targets
  forward_to = [loki.process.logs_service.receiver]
}

loki.process "logs_service" {
  stage.static_labels {
    values = {
      instance = "{HOSTNAME}",
      cluster = "{DUPLO_CLUSTER_NAME}",
      namespace = "{DUPLO_TENANT_NAME}",
      label_tenantname = "{DUPLO_TENANT_NAME}",
    }
  }

  stage.match {
		selector = "{job=\"integrations/iis\"} |~ \"^#\""
		action = "drop"
		drop_counter_reason = "iis_comment_line"
	}

  forward_to = [loki.write.logs_service.receiver]
}

prometheus.remote_write "metrics_service" {
  endpoint {
    url = "{DUPLO_METRICS_URL}"
  }
}

loki.write "logs_service" {
  endpoint {
    url = "{DUPLO_LOGGING_URL}"
  }
}

logging {
  level  = "info"
  format = "logfmt"
}
